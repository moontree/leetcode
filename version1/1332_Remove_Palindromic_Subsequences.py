"""
=========================
Project -> File: leetcode -> 1332_Remove_Palindromic_Subsequences.py
Author: zhangchao
=========================
Given a string s consisting only of letters 'a' and 'b'.
In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string,
if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.


Example 1:

Input:
    s = "ababa"
Output:
    1
Explanation:
    String is already palindrome

Example 2:

Input:
    s = "abb"
Output:
    2
Explanation:
    "abb" -> "bb" -> "".
    Remove palindromic subsequence "a" then "bb".

Example 3:

Input:
    s = "baabb"
Output:
    2
Explanation:
    "baabb" -> "b" -> "".
    Remove palindromic subsequence "baab" then "b".

Example 4:

Input:
    s = ""
Output:
    0

Constraints:

    0 <= s.length <= 1000
    s only consists of letters 'a' and 'b'
"""


class Solution(object):
    def removePalindromeSub(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) == 0:
            return 0
        l, r = 0, len(s) - 1
        while l < r:
            if s[l] == s[r]:
                l += 1
                r -= 1
            else:
                return 2
        return 1


examples = [
    {
        "input": {
            "s": "ababa",
        },
        "output": 1
    }, {
        "input": {
            "s": "abb",
        },
        "output": 2
    }, {
        "input": {
            "s": "baabb",
        },
        "output": 2
    }, {
        "input": {
            "s": "",
        },
        "output": 0
    }
]

import time

if __name__ == '__main__':
    solution = Solution()
    for n in dir(solution):
        if not n.startswith('__'):
            func = getattr(solution, n)
    print(func)
    for example in examples:
        print '----------'
        start = time.time()
        v = func(**example['input'])
        end = time.time()
        print v, v == example['output'], end - start
