"""
Given an array A of integers,
a ramp is a tuple (i, j) for which i < j and A[i] <= A[j].  The width of such a ramp is j - i.

Find the maximum width of a ramp in A.  If one doesn't exist, return 0.



Example 1:

Input:
    [6,0,8,2,1,5]
Output:
    4
Explanation:
    The maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.

Example 2:

Input:
    [9,8,1,0,1,9,4,0,4,1]
Output:
    7
Explanation:
    The maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.


Note:
    2 <= A.length <= 50000
    0 <= A[i] <= 50000
"""


class Solution(object):
    def maxWidthRamp(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        q = []
        for i, n in enumerate(A):
            if not q:
                q.append(i)
            elif A[q[-1]] > n:
                q.append(i)
        res = 0
        for j in range(len(A))[::-1]:
            v = 0
            while q and A[j] >= A[q[-1]]:
                v = j - q.pop()
            if not q:
                v = j
            res = max(res, v)
        return res


examples = [
    {
        "input": {
            "A": [6, 0, 8, 2, 1, 5],
        },
        "output": 4
    }, {
        "input": {
            "A": [0, 1],
        },
        "output": 1
    }, {
        "input": {
            "A": [9, 8, 1, 0, 1, 9, 4, 0, 4, 1],
        },
        "output": 7
    }, {
        "input": {
            "A": [2, 2, 1],
        },
        "output": 1
    }, {
        "input": {
            "A": [999,999,998,997,996,996,996,996,995,995,994,997,993,993,992,991,987,986,984,982,981,980,979,977,977,975,975,967,967,967,966,964,964,963,963,959,959,958,957,956,956,953,953,950,949,947,947,947,946,945,945,944,944,943,943,941,940,938,938,936,935,934,933,933,932,926,925,924,922,921,920,920,920,919,919,918,917,915,914,914,913,912,911,911,910,910,907,906,906,906,905,905,905,901,901,901,898,898,896,896,896,895,893,276,886,886,885,884,882,881,881,881,881,880,880,879,879,876,875,875,874,874,874,873,873,872,872,872,871,871,869,869,868,866,865,865,864,863,862,859,859,859,859,858,856,855,853,853,850,850,849,847,845,844,843,843,843,842,842,842,842,841,839,838,838,837,837,837,836,833,833,832,831,830,830,828,826,825,824,823,822,822,821,821,819,819,819,819,817,817,817,815,813,813,812,812,810,810,807,806,805,804,803,803,802,801,801,799,798,797,796,796,796,792,792,792,792,791,791,791,790,425,789,788,788,787,787,786,785,785,784,783,783,783,781,781,780,780,779,778,778,778,777,777,777,777,774,773,772,771,769,769,769,766,766,765,765,762,762,757,756,755,753,753,752,749,749,748,747,747,746,746,743,742,740,736,735,733,731,730,730,727,726,725,725,724,723,721,719,718,717,716,713,713,711,710,709,709,707,705,704,704,703,702,701,699,698,698,696,696,696,692,692,692,691,689,688,688,410,685,684,684,683,681,680,680,680,678,677,677,676,674,673,672,671,671,671,670,670,668,662,662,662,660,660,659,659,658,657,656,654,651,651,651,649,648,646,646,645,644,641,640,636,636,634,634,633,633,632,629,624,623,623,621,620,620,617,616,615,614,612,611,611,609,608,608,606,606,605,605,603,602,602,601,601,600,599,598,596,595,594,593,593,593,592,590,587,586,586,586,586,586,586,584,582,579,579,572,572,571,568,565,565,565,564,563,559,558,556,555,555,554,554,553,553,552,552,551,550,550,549,548,547,546,546,545,545,544,544,543,540,540,539,539,538,534,534,534,533,533,532,532,531,531,531,531,530,529,529,529,528,526,525,525,524,523,521,519,518,518,518,518,515,514,514,514,512,638,511,511,510,508,507,506,504,501,500,499,499,498,497,496,493,492,490,487,487,487,486,485,485,483,482,482,482,482,481,478,478,477,477,475,475,473,473,472,469,468,468,468,467,465,465,465,464,462,459,459,458,458,458,457,456,456,456,455,455,452,451,451,450,449,448,447,446,446,444,444,442,441,440,438,435,434,434,432,432,431,430,429,427,426,426,426,424,424,422,422,421,421,420,420,420,420,420,418,418,418,416,416,416,415,414,412,412,411,411,411,409,409,408,406,404,404,403,401,401,401,398,398,398,395,394,391,389,388,388,387,386,385,385,384,384,384,383,380,380,379,378,378,377,376,375,375,374,374,373,373,372,372,368,367,367,366,364,364,361,361,360,358,357,355,354,354,352,352,348,344,344,343,342,342,341,341,339,338,337,335,334,333,333,332,332,332,331,329,328,327,327,326,326,325,324,323,323,322,320,319,315,315,313,287,309,308,307,307,307,306,306,303,302,301,300,300,294,294,293,293,292,292,291,289,289,288,287,286,280,280,277,277,277,275,274,274,76,272,271,270,270,269,269,268,267,267,265,265,264,263,263,262,259,258,258,258,258,256,256,254,252,251,251,250,247,246,245,244,242,242,240,238,237,236,235,235,234,234,234,233,231,229,227,227,227,445,225,223,223,220,219,219,218,216,214,214,212,212,212,209,209,208,208,207,207,206,205,205,202,201,198,198,197,195,195,192,192,192,191,188,188,187,184,183,181,180,180,177,177,173,172,172,172,587,170,170,169,169,169,168,168,167,164,162,162,162,161,160,158,158,157,156,156,155,155,154,153,151,149,147,147,145,145,143,143,142,141,140,139,139,138,138,137,137,132,131,130,130,129,129,129,129,127,127,127,125,123,121,121,118,117,117,113,113,113,111,111,110,109,109,108,108,108,108,106,105,105,105,104,103,103,102,102,100,100,99,98,98,98,98,96,96,95,93,92,91,91,90,89,87,87,86,83,80,79,78,76,74,71,71,70,69,69,68,67,66,65,64,64,62,62,60,60,59,59,58,57,56,56,56,55,54,51,50,47,47,47,46,45,44,44,43,42,41,40,37,36,36,36,35,35,33,31,30,28,23,22,21,20,20,20,19,16,15,13,10,9,7,6,6,5,5,5,3,3,3,2,2,2,1,1,0],
        },
        "output": 718
    }
]


import time
if __name__ == '__main__':
    solution = Solution()
    for n in dir(solution):
        if not n.startswith('__'):
            func = getattr(solution, n)
    print(func)
    for example in examples:
        print '----------'
        start = time.time()
        v = func(**example['input'])
        end = time.time()
        print v, v == example['output'], end - start
